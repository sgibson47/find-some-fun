{"version":3,"file":"eventbrite.min.js","sources":["../node_modules/whatwg-fetch/fetch.js","../node_modules/isomorphic-fetch/fetch-npm-browserify.js","../src/request.ts","../src/baseApi.ts","../src/users.ts","../src/organizations.ts","../src/index.ts","../src/constants.ts"],"sourcesContent":["(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\nrequire('whatwg-fetch');\nmodule.exports = self.fetch.bind(self);\n","import {JSONResponseData, ParsedResponseError} from './types';\nimport 'isomorphic-fetch';\n\n/**\n * Return a promise that is resolved or rejected depending on the response's\n * status code.\n */\nconst _checkStatus = (res: Response): Promise<Response> => {\n    if (res.status >= 400) {\n        // Need to wrap the response in an object so that it matches the same error object\n        // returned by _catchStatusError\n        return Promise.reject(res);\n    }\n    return Promise.resolve(res);\n};\n\nconst _tryParseJSON = <TResponseType>(\n    res: Response\n): Promise<TResponseType> => {\n    try {\n        return (\n            res\n                .json()\n\n                // if JSON cannot parse, it'll return a rejected promise instead\n                // of throwing an error, so we catch that rejection so that we can rejected\n                // with the response like everything else expects\n                .catch(() => Promise.reject(res))\n        );\n    } catch (error) {\n        return Promise.reject(res);\n    }\n};\n\n/**\n * Calls fetch on provided url with default options necessary for interacting\n * with our JSON API. Parses the JSON, provides appropriate headers, and asserts\n * a valid status from the server.\n */\nconst _fetchJSON = <TResponseType>(\n    url: string,\n    {headers = {}, method = 'GET', mode, ...options}: RequestInit = {}\n): Promise<TResponseType> => {\n    let fetchHeaders = headers as HeadersInit;\n\n    if (method !== 'GET') {\n        fetchHeaders = {\n            'Content-Type': 'application/json',\n            ...headers,\n        };\n    }\n\n    const fetchOptions = {\n        method,\n        mode,\n        headers: fetchHeaders,\n        credentials: mode === 'cors' ? 'include' : 'same-origin',\n        ...options,\n    } as RequestInit;\n\n    return fetch(url, fetchOptions)\n        .then(_checkStatus)\n        .then<TResponseType>(_tryParseJSON);\n};\n\nconst _hasArgumentsError = (responseData: JSONResponseData): boolean =>\n    !!(\n        responseData['error_detail'] &&\n        responseData['error_detail']['ARGUMENTS_ERROR']\n    );\n\n/**\n * Parse v3 errors into an array of objects representing the errors returned by\n * the API. The format of the parsed errors looks like:\n *\n *  {\n *      status_code: 400,\n *      error: 'ERROR_CODE',\n *      description: 'Description of the error\n *  }\n *\n * An ARGUMENTS_ERROR looks like:\n *\n *  {\n *      error: 'ARGUMENTS_ERROR',\n *      description: 'Some of the fields were invalid or something',\n *      argumentErrors: {\n *          attr1: ['INVALID'],\n *          attr2: ['This field is required']\n *      }\n *  }\n *\n */\nconst _parseError = (responseData: JSONResponseData): ParsedResponseError => {\n    if (!responseData.error) {\n        // Weird error format, return null\n        return null;\n    }\n\n    let error = {\n        error: responseData.error,\n        description: responseData['error_description'],\n    } as ParsedResponseError;\n\n    if (_hasArgumentsError(responseData)) {\n        error = {\n            ...error,\n            argumentErrors: responseData['error_detail']['ARGUMENTS_ERROR'],\n        };\n    }\n\n    return error;\n};\n\n/**\n * Designed to work with `_checkStatus`, or any function that\n * raises an error on an invalid status. The error raised should have a `response`\n * property with the original response object.\n *\n * Example usage:\n *\n * _fetchJSON('/api/v3/test/path', {'body': someData})\n *     .catch(_catchStatusError)\n *     .then(doSomethingOnSuccess)\n *     .catch(({response, parsedError}) => doSomethingOnError());\n */\nconst _catchStatusError = (res: Response): Promise<any> =>\n    new Promise((resolve, reject) => {\n        _tryParseJSON(res)\n            // handled error, so reject with parsed error data along with response\n            .then((responseData: JSONResponseData) =>\n                reject({\n                    response: res,\n                    parsedError: _parseError(responseData),\n                })\n            )\n\n            // Unhandled error\n            .catch(() =>\n                reject({\n                    response: res,\n                })\n            );\n    });\n\nexport interface DefaultApiResponse {\n    [key: string]: any;\n}\n\n/**\n * Low-level method that makes fetch requests, returning the response formatted as JSON.\n * It parses errors from API v3 and throws exceptions with those errors\n */\nconst jsonRequest = <TResponseType = DefaultApiResponse>(\n    url: string,\n    options?: RequestInit\n): Promise<TResponseType> =>\n        _fetchJSON<TResponseType>(url, options).catch(_catchStatusError);\n\nexport default jsonRequest;\n","import {JSONRequest} from './types';\n\nconst SNAKE_CASE_MATCH = /_\\w/g;\nconst snakeToCamel = (str: string) =>\n    str.replace(SNAKE_CASE_MATCH, (chars: string) => chars[1].toUpperCase());\n\nconst transformKeysSnakeToCamel = <T extends { [key: string]: any } = {}>(\n    obj: T\n) =>\n    Object.keys(obj).reduce((memo, key) => {\n        let newValue = obj[key];\n        const camelKey = snakeToCamel(key);\n\n        if (\n            newValue &&\n            typeof newValue === 'object' &&\n            !Array.isArray(newValue)\n        ) {\n            newValue = transformKeysSnakeToCamel(newValue);\n        }\n\n        return {\n            ...memo,\n            [camelKey]: newValue,\n        };\n    }, {}) as T;\n\n/**\n * Returns a function that sends a request, and transforms its results\n */\nconst makeJsonRequest = <T>(\n    request: JSONRequest,\n    transformers: Array<(obj: T) => T>\n) => (url: string, options?: RequestInit) =>\n        request(url, options).then((response: T) =>\n            transformers.reduce<T>((acc, transformer) => {\n                let memo = acc;\n\n                memo = transformer(response);\n                return memo;\n            }, response)\n        );\n\n/**\n * Base API class for creating new API Classes.\n * Also encapsulates default transformers such as snake to camel.\n */\nexport abstract class BaseApi<T> {\n    request: JSONRequest<T>;\n\n    constructor(req: JSONRequest<T>) {\n        this.request = makeJsonRequest(req, [transformKeysSnakeToCamel]);\n    }\n}\n","import {BaseApi} from './baseApi';\n\nexport interface Email {\n    email?: string;\n    primary?: boolean;\n}\n\nexport interface User {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    imageId?: string;\n    email?: Email[];\n}\n\n/**\n * API for working with Users\n */\nexport class UserApi extends BaseApi<User> {\n    me() {\n        return this.request('/users/me/');\n    }\n\n    get(id: string) {\n        return this.request(`/users/${id}/`);\n    }\n}\n","import {BaseApi} from './baseApi';\nimport {PaginatedResponse} from './types';\n\nexport interface Organization {\n    id: string;\n    name: string;\n    imageId: string;\n    locale?: string;\n    vertical?: 'Default' | 'Music';\n}\n\n/**\n * API for working with Organizations\n */\nexport class OrganizationsApi extends BaseApi<PaginatedResponse<Organization>> {\n    /**\n     * Get organizations based off a user id.\n     * @param {string} userId\n     */\n    getByUser(userId: string) {\n        return this.request(`/users/${userId}/organizations/`);\n    }\n}\n","import {Sdk, SdkConfig, JSONRequest} from './types';\nimport request from './request';\nimport {UserApi} from './users';\nimport {OrganizationsApi} from './organizations';\n\nexport * from './constants';\n\nconst DEFAULT_API_URL = 'https://www.eventbriteapi.com/v3';\n\ntype MakeRequestFunction = (baseUrl: string, token: string) => JSONRequest;\n\nconst makeRequest: MakeRequestFunction = (baseUrl: string, token: string) => (\n    endpoint,\n    options = {}\n) => {\n    const url = `${baseUrl}${endpoint}`;\n    let requestOptions = options;\n\n    if (token) {\n        requestOptions = {\n            ...requestOptions,\n            headers: {\n                ...(requestOptions.headers || {}),\n                Authorization: `Bearer ${token}`,\n            },\n        };\n    }\n\n    return request(url, requestOptions);\n};\n\nconst eventbrite = ({\n    baseUrl = DEFAULT_API_URL,\n    token,\n}: SdkConfig = {}): Sdk => {\n    const jsonRequest = makeRequest(baseUrl, token);\n\n    return {\n        request: jsonRequest,\n        users: new UserApi(jsonRequest),\n        organizations: new OrganizationsApi(jsonRequest),\n    };\n};\n\nexport default eventbrite;\n","export const PAGE_KEY = 'page';\nexport const CONTINUATION_KEY = 'continuation';\n"],"names":["self","fetch","support","Symbol","Blob","e","viewClasses","isDataView","obj","DataView","prototype","isPrototypeOf","isArrayBufferView","ArrayBuffer","isView","indexOf","Object","toString","call","Headers","append","name","value","normalizeName","normalizeValue","oldValue","this","map","get","has","hasOwnProperty","set","forEach","callback","thisArg","keys","items","push","iteratorFor","values","entries","iterator","methods","Request","clone","body","_bodyInit","Body","Response","status","statusText","headers","url","error","response","type","redirectStatuses","redirect","RangeError","location","input","init","Promise","resolve","reject","request","xhr","XMLHttpRequest","onload","rawHeaders","options","getAllResponseHeaders","split","line","parts","key","shift","trim","join","responseURL","responseText","onerror","TypeError","ontimeout","open","method","credentials","withCredentials","responseType","setRequestHeader","send","polyfill","String","test","toLowerCase","next","done","undefined","Array","isArray","header","getOwnPropertyNames","consumed","bodyUsed","fileReaderReady","reader","result","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","buf","slice","view","Uint8Array","byteLength","buffer","_initBody","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","Error","rejected","arrayBuffer","then","text","readAsText","chars","length","i","fromCharCode","readArrayBufferAsText","formData","decode","json","JSON","parse","upcased","mode","toUpperCase","referrer","form","bytes","replace","decodeURIComponent","bodyInit","ok","bind","_checkStatus","res","_tryParseJSON","_fetchJSON","_a","_b","_c","fetchHeaders","Content-Type","fetchOptions","tslib_1.__assign","_catchStatusError","responseData","parsedError","description","argumentErrors","_parseError","SNAKE_CASE_MATCH","transformKeysSnakeToCamel","reduce","memo","newValue","camelKey","req","transformers","acc","transformer","tslib_1.__extends","UserApi","id","BaseApi","OrganizationsApi","userId","makeRequest","baseUrl","token","endpoint","requestOptions","Authorization","jsonRequest","users","organizations"],"mappings":"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"}