{"version":3,"sources":["baseApi.ts"],"names":["SNAKE_CASE_MATCH","transformKeysSnakeToCamel","obj","Object","keys","reduce","memo","key","newValue","camelKey","replace","chars","toUpperCase","_typeof","Array","isArray","_objectSpread","_defineProperty","BaseApi","req","request","transformers","_classCallCheck","this","url","options","then","response","acc","transformer"],"mappings":"2lBAEA,IAAMA,EAAmB,OAInBC,EAA6B,SAA7BA,EACFC,GAD+B,OAG/BC,OAAOC,KAAKF,GAAKG,OAAO,SAACC,EAAMC,GAC3B,IAAIC,EAAWN,EAAIK,GACbE,EAAwBF,EAP9BG,QAAQV,EAAkB,SAACW,GAAD,OAAmBA,EAAM,GAAGC,gBAiBtD,OAPIJ,GACoB,WAApBK,EAAOL,KACNM,MAAMC,QAAQP,KAEfA,EAAWP,EAA0BO,sUAGzCQ,CAAA,GACOV,EADPW,EAAA,GAEKR,EAAWD,KAEjB,eAyBH,SAAAU,EAAYC,GApBS,IACrBC,EACAC,+FAkBiCC,CAAAC,KAAAL,GAAAD,EAAAM,KAAA,eAAA,GAC7BA,KAAKH,SApBTA,EAoBmCD,EAnBnCE,EAmBwC,CAACpB,GAlBxC,SAACuB,EAAaC,GAAd,OACGL,EAAQI,EAAKC,GAASC,KAAK,SAACC,GAAD,OACvBN,EAAahB,OAAU,SAACuB,EAAKC,GAIzB,OADOA,EAAYF,IAEpBA","file":"baseApi.min.js","sourcesContent":["import {JSONRequest} from './types';\n\nconst SNAKE_CASE_MATCH = /_\\w/g;\nconst snakeToCamel = (str: string) =>\n    str.replace(SNAKE_CASE_MATCH, (chars: string) => chars[1].toUpperCase());\n\nconst transformKeysSnakeToCamel = <T extends { [key: string]: any } = {}>(\n    obj: T\n) =>\n    Object.keys(obj).reduce((memo, key) => {\n        let newValue = obj[key];\n        const camelKey = snakeToCamel(key);\n\n        if (\n            newValue &&\n            typeof newValue === 'object' &&\n            !Array.isArray(newValue)\n        ) {\n            newValue = transformKeysSnakeToCamel(newValue);\n        }\n\n        return {\n            ...memo,\n            [camelKey]: newValue,\n        };\n    }, {}) as T;\n\n/**\n * Returns a function that sends a request, and transforms its results\n */\nconst makeJsonRequest = <T>(\n    request: JSONRequest,\n    transformers: Array<(obj: T) => T>\n) => (url: string, options?: RequestInit) =>\n        request(url, options).then((response: T) =>\n            transformers.reduce<T>((acc, transformer) => {\n                let memo = acc;\n\n                memo = transformer(response);\n                return memo;\n            }, response)\n        );\n\n/**\n * Base API class for creating new API Classes.\n * Also encapsulates default transformers such as snake to camel.\n */\nexport abstract class BaseApi<T> {\n    request: JSONRequest<T>;\n\n    constructor(req: JSONRequest<T>) {\n        this.request = makeJsonRequest(req, [transformKeysSnakeToCamel]);\n    }\n}\n"]}