{"version":3,"sources":["baseApi.ts"],"names":["SNAKE_CASE_MATCH","snakeToCamel","str","replace","chars","toUpperCase","transformKeysSnakeToCamel","obj","Object","keys","reduce","memo","key","newValue","camelKey","Array","isArray","makeJsonRequest","request","transformers","url","options","then","response","acc","transformer","BaseApi","req"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAMA,gBAAgB,GAAG,MAAzB;;AACA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD;AAAA,WACjBA,GAAG,CAACC,OAAJ,CAAYH,gBAAZ,EAA8B,UAACI,KAAD;AAAA,aAAmBA,KAAK,CAAC,CAAD,CAAL,CAASC,WAAT,EAAnB;AAAA,KAA9B,CADiB;AAAA,GAArB;;AAGA,MAAMC,yBAAyB,GAAI,SAA7BA,yBAA6B,CAC/BC,GAD+B;AAAA,WAG/BC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,MAAjB,CAAwB,UAACC,IAAD,EAAOC,GAAP,EAAe;AACnC,UAAIC,QAAQ,GAAGN,GAAG,CAACK,GAAD,CAAlB;AACA,UAAME,QAAQ,GAAGb,YAAY,CAACW,GAAD,CAA7B;;AAEA,UACIC,QAAQ,IACR,QAAOA,QAAP,MAAoB,QADpB,IAEA,CAACE,KAAK,CAACC,OAAN,CAAcH,QAAd,CAHL,EAIE;AACEA,QAAAA,QAAQ,GAAGP,yBAAyB,CAACO,QAAD,CAApC;AACH;;AAED,+BACOF,IADP,sBAEKG,QAFL,EAEgBD,QAFhB;AAIH,KAhBD,EAgBG,EAhBH,CAH+B;AAAA,GAAnC;AAqBA;;;;;AAGA,MAAMI,eAAe,GAAI,SAAnBA,eAAmB,CACrBC,OADqB,EAErBC,YAFqB;AAAA,WAGpB,UAACC,GAAD,EAAcC,OAAd;AAAA,aACGH,OAAO,CAACE,GAAD,EAAMC,OAAN,CAAP,CAAsBC,IAAtB,CAA2B,UAACC,QAAD;AAAA,eACvBJ,YAAY,CAACT,MAAb,CAAuB,UAACc,GAAD,EAAMC,WAAN,EAAsB;AACzC,cAAId,IAAI,GAAGa,GAAX;AAEAb,UAAAA,IAAI,GAAGc,WAAW,CAACF,QAAD,CAAlB;AACA,iBAAOZ,IAAP;AACH,SALD,EAKGY,QALH,CADuB;AAAA,OAA3B,CADH;AAAA,KAHoB;AAAA,GAAzB;AAaA;;;;;;MAIsBG,O,GAGlB,iBAAYC,GAAZ,EAAiC;AAAA;;AAAA;;AAC7B,SAAKT,OAAL,GAAeD,eAAe,CAACU,GAAD,EAAM,CAACrB,yBAAD,CAAN,CAA9B;AACH,G","sourcesContent":["import {JSONRequest} from './types';\n\nconst SNAKE_CASE_MATCH = /_\\w/g;\nconst snakeToCamel = (str: string) =>\n    str.replace(SNAKE_CASE_MATCH, (chars: string) => chars[1].toUpperCase());\n\nconst transformKeysSnakeToCamel = <T extends { [key: string]: any } = {}>(\n    obj: T\n) =>\n    Object.keys(obj).reduce((memo, key) => {\n        let newValue = obj[key];\n        const camelKey = snakeToCamel(key);\n\n        if (\n            newValue &&\n            typeof newValue === 'object' &&\n            !Array.isArray(newValue)\n        ) {\n            newValue = transformKeysSnakeToCamel(newValue);\n        }\n\n        return {\n            ...memo,\n            [camelKey]: newValue,\n        };\n    }, {}) as T;\n\n/**\n * Returns a function that sends a request, and transforms its results\n */\nconst makeJsonRequest = <T>(\n    request: JSONRequest,\n    transformers: Array<(obj: T) => T>\n) => (url: string, options?: RequestInit) =>\n        request(url, options).then((response: T) =>\n            transformers.reduce<T>((acc, transformer) => {\n                let memo = acc;\n\n                memo = transformer(response);\n                return memo;\n            }, response)\n        );\n\n/**\n * Base API class for creating new API Classes.\n * Also encapsulates default transformers such as snake to camel.\n */\nexport abstract class BaseApi<T> {\n    request: JSONRequest<T>;\n\n    constructor(req: JSONRequest<T>) {\n        this.request = makeJsonRequest(req, [transformKeysSnakeToCamel]);\n    }\n}\n"],"file":"baseApi.js"}