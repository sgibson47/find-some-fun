function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var SNAKE_CASE_MATCH = /_\w/g;

var snakeToCamel = function snakeToCamel(str) {
  return str.replace(SNAKE_CASE_MATCH, function (chars) {
    return chars[1].toUpperCase();
  });
};

var transformKeysSnakeToCamel = function transformKeysSnakeToCamel(obj) {
  return Object.keys(obj).reduce(function (memo, key) {
    var newValue = obj[key];
    var camelKey = snakeToCamel(key);

    if (newValue && _typeof(newValue) === 'object' && !Array.isArray(newValue)) {
      newValue = transformKeysSnakeToCamel(newValue);
    }

    return _objectSpread({}, memo, _defineProperty({}, camelKey, newValue));
  }, {});
};
/**
 * Returns a function that sends a request, and transforms its results
 */


var makeJsonRequest = function makeJsonRequest(request, transformers) {
  return function (url, options) {
    return request(url, options).then(function (response) {
      return transformers.reduce(function (acc, transformer) {
        var memo = acc;
        memo = transformer(response);
        return memo;
      }, response);
    });
  };
};
/**
 * Base API class for creating new API Classes.
 * Also encapsulates default transformers such as snake to camel.
 */


export var BaseApi = function BaseApi(req) {
  _classCallCheck(this, BaseApi);

  _defineProperty(this, "request", void 0);

  this.request = makeJsonRequest(req, [transformKeysSnakeToCamel]);
};